j线程操作资源类
判断干活通知，判断啥，就是设置标识
防止虚假唤醒
========================================================================================================================
synchronized和lock的区别？
1.原始构成
1.1synchronized是关键字，属于JVM层面。monitorenter、monitorexit 底层是通过monitor对象来完成，其实wait/notify等方法也依赖于
monitor对象，只有在同步代码块或同步方法中才能调用wait/notify方法。
1.2lock是具体类（java.util.concurrent.locks.Lock）是api层面的锁。
2.使用方法
2.1synchronized不需要用户手动的释放锁，当synchronized代码执行完后，系统会自动让线程释放对锁的占用。
ReetrantLock则需要用户手动释放锁，若没有主动释放锁，就有可能导致死锁的现象。
需要lock/unlock方法配合try/finally语句来完成
3.等待是否可中断
synchronized不可中断，除非抛出异常或者正常运行完成
ReetrantLock可中断，设置超时时间或者调用interrupt方法
4.加锁是否公平
synchronized非公平锁
ReetrantLock两者都可以，默认非公平锁。
5.锁绑定多个条件Condition
synchronized没有
ReetrantLock用来实现分组唤醒需要唤醒的线程们，可以精准唤醒，而不像synchronized要么随机唤醒一个线程，要么唤醒所有线程。

========================================================================================================================
关于同步的总结：
1.同步方法仍然涉及到同步监视器，只是不需要我们显示的声明。
2.非静态的同步方法，同步监视器是this
3.静态的同步方法，同步监视器是当前类本身

同步代码块
synchronized(同步监视器){
    //需要被同步的代码
}

1.操作共享数据的代码，即为需要被同步的代码。不能包含代码多了，也不能包含代码少了。
2.共享数据：多个线程共同操作的变量。
3.同步监视器，俗称锁，任何一个类的对象，都可以充当锁。要求多个线程必须要公用同一把锁。
========================================================================================================================
synchronized与lock的异同？
相同点：都可以解决线程安全问题。
不同点：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器，lock需要手动的启动同步（lock），同时结束同步也需要手动
的实现（unlock）
synchronized是隐式锁
lock是显示锁
========================================================================================================================
sleep():不会释放锁
线程通信涉及到的方法：
1.wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。
2.notify():一旦执行此方法，就会唤醒被wait的一个线程，如果有多个线程被wait，则唤醒优先级高的那个线程。
3.notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。

1.wait、notify、notifyAll三个方法的使用的前提必须在同步代码块或者同步方法中。
2.wait、notify、notifyAll三个方法的调用者必须是同步代码块或同步方法中的同步监视器（锁）
否则会出现legalMonitorStateException异常
3.wait、notify、notifyAll三个方法是定义在java.lang.Object类中

sleep与wait的异同？
相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。
不同点：1）两个方法声明的位置不同，Tread类中申明的sleep，Object类中声明的wait
        2）调用的要求不同，sleep可以在任何需要的场景下调用，wait必须使用在同步代码块或者同步方法中
        3）sleep不会释放锁，wait会释放锁
========================================================================================================================
创建线程的方式：
1.继承Thread类
2.实现Runnable接口
3.实现Callable接口
4.使用线程池

如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？
1.call()可以返回值
2.call()可以抛出异常，被外面的操作捕获，获取异常信息
3.Callable支持泛型的

========================================================================================================================
内存可见性问题；当多个线程操作共享数据时，彼此不可见。
volatile：当多个线程操作共享数据时，保证内存中的数据可见。相较于synchronized是一种轻量级的同步策略。
注意：
1.volatile不具备“互斥性”
2.volatile不能保证变量的“原子性”
i++原子问题，i++操作实际上分为“读-改-写”
int temp = i;
i = i + 1；
i= temp;

jdk5.0后 java.util.concurrent.atomic包下提供了常用的原子变量
1.volatile保证内存可见性
2.CAS（Compare-And-Swap）算法保证数据的原子性
CAS算法是硬件对于并发操作共享数据的支持
CAS包含了三个操作数：
内存值 V
预估值 A
更新值 B
当且仅当V==A时，V=B，否则将不做任何操作
========================================================================================================================
一、线程池：提供了一个线程队列，队列中保存着所有等待状态的线程，避免了创建于销毁额外开销，提高了响应速度。
二、线程池的体系结构：
java.util.concurrent.Executor ：负责线程的使用与调度的根接口
    |--ExecutorService 子接口：线程池的主要接口
        |--ThreadPoolExecutor 线程池实现类
        |--ScheduledExecutorService 子接口：负责线程的调度
            |--ScheduledThreadPoolExecutor ：继承ThreadPoolExecutor 实现ScheduledExecutorService

三、工具类：Executors
ExecutorService newFixedThreadPool()：创建固定大小的线程池
ExecutorService newCachedThreadPool()：缓存线程池，线程池的数量不固定，可以根据需求自动的更改数量。
ExecutorService newSingleThreadPool()：创建单个线程池，线程池中只有一个线程。

ScheduledExecutorService newScheduledThreadPool()：创建固定大小的线程池，可以延迟或定时的执行任务。


线程池的7大参数：
工作流程：
1）线程池创建，准备好core数量的核心线程，准备接受任务
1.1、core满了，就将再进来的任务放入阻塞队列中，空闲的core就会自己去阻塞队列获取任务执行
1.2、阻塞队列满了，就直接开新线程执行，最大只能开max指定的数量
1.3、max满了就用RejectedExecutionHandler拒绝任务
1.4、max都执行完成，有很多空闲，在指定的时间keepAliveTime以后，释放max-core这些线程




Java NIO与IO的主要区别？
1.IO面向流。NIO面向缓冲区的。
2.IO阻塞IO。NIO非阻塞IO。
3.NIO选择器（selectors）

通道和缓冲区的区别？
Java NIO系统的核心在于：通道（Channel）和缓冲区（Buffer）。通道表示打开到IO设备（例如：文件、套接字）的连接。若需要使用
NIO系统，需要获取用于连接IO设备的通道以及容纳数据的缓冲区。然后操作缓冲区，对数据进行处理。

简而言之：Channel负责传输，Buffer负责存储。

========================================================================================================================
ByteBuffer buffer = ByteBuffer.allocate(1024);//通过allocate()获取缓冲区
Buffer
一、缓冲区存取数据的两个核心方法
put()：存入数据到缓冲区
get()：获取缓冲区中数据

二、缓冲区中四个核心属性
capacity：容量，表示缓冲区中最大存储数据的容量，一旦声明不能改变。
limit：界限，表示缓冲区中可以操作数据的大小（limit后边数据不能进行读写）
position：位置，表示缓冲区中正在操作数据的位置。position<=limit<=capacity
mark：标记，表示记录当前position的位置，可以通过reset()恢复到mark的位置

切换读取数据模式 buffer.flip();//必须切换后才能进行读取

三、直接缓冲区与非直接缓冲区
非直接缓冲区：通过allocate()方法分配缓冲区，将缓冲区建立在JVM的内存中。
直接缓冲区：通过allocateDirect()方法分配直接缓冲区，将缓冲区建立在操作系统的物理内存中。
========================================================================================================================
一、通道（Channel）：用于源节点与目标节点的连接，在Java NIO 中负责缓冲区中数据的传输。Channel本身不存储数据，因此需要配合
缓冲区进行传输。

二、通道的主要实现类：
java.nio.channels.Channel 接口
    |--FileChannel
    |--SocketChannel
    |--ServerSocketChannel
    |--DatagramChannel

三、获取通道
1.Java针对支持通道的类提供了getChannel()方法
    本地IO
    FileInputStream/FileOutputStream
    RandomAccessFile

    网络IO
    Socket
    ServerSocket
    DatagramSocket
2.jdk1.7中的NIO.2 针对各个通道提供了静态方法open()或者Files工具类的newByteChannel()

四、通道之间的数据传输
transferFrom()
transferTo()
transferFrom()与transferTo()用的是直接缓冲区

五、分散（Scatter）与聚集（Gather）
分散读取（Scattering Reads）：将通道中的数据分散到多个缓冲区中。
聚集写入（Gathering Writes）：将多个缓冲区中的数据聚集到通道中。
========================================================================================================================
阻塞与非阻塞
1.传统的IO流都是阻塞的，也就是说，当一个线程调用read()或write()时，该线程被阻塞，直到有一些数据被读取或写入，该线程在此期间
不能执行其他任务。因此，在完成网络通信进行IO操作时，由于线程会阻塞，所以服务端必须为每个客户端都提供一个独立的线程进行处理，
当服务器需要处理大量客户端时，性能急剧下降。
2.Java NIO 是非阻塞模式的。当线程从某通道进行读写数据时，若没有数据可用时，该线程是可以进行其他任务，线程通常将非阻塞IO的
空闲时间用于在其他通道上执行IO操作，所以单独的线程可以管理多个输入和输出通道。因此，NIO可以让服务器端使用一个或有限个线程
来同时处理连接到服务器端的所有客户端。






















